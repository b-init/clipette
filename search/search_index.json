{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Clipette # Python clipboard utility that works natively on python with its inbuilt modules to exchange data with the windows clipboard. Supports only the Windows clipboard through the win32 API. Is designed particularly to work properly with different image formats but also works with other clipboard formats. Visit repo on GitHub Usage Functions Exceptions References","title":"Home"},{"location":"#clipette","text":"Python clipboard utility that works natively on python with its inbuilt modules to exchange data with the windows clipboard. Supports only the Windows clipboard through the win32 API. Is designed particularly to work properly with different image formats but also works with other clipboard formats. Visit repo on GitHub Usage Functions Exceptions References","title":"Clipette"},{"location":"Contributing-guide/","text":"Contributing to Clipette # Bug fixes, feature additions, tests, documentation and more can be contributed via issues and/or pull requests . All contributions are welcome. Bug fixes, feature additions, etc. # Please send a pull request to the main branch. Please include documentation for new features. Tests or documentation without bug fixes or feature additions are welcome too. Feel free to ask questions via issues or discussions . Fork the Clipette repository. Create a branch from main . Develop bug fixes, features, tests, etc. Make sure to test your updates prior to creating a pull request. Create a pull request to pull the changes from your branch to the Clipette main . Guidelines # Separate code commits from reformatting commits. Follow PEP 8. Include Documentation within the code in docstrings near definitions as needed or appropriate with your bug fixes, feature additions and tests. Documentation docstrings within code must follow Sphinx docstring style . Reporting Issues # When reporting issues, please include code that reproduces the issue and whenever possible, an image that demonstrates the issue. Please upload images to GitHub, not to third-party file hosting sites. If necessary, add the image to a zip or tar archive. Provide details # What did you do? What did you expect to happen? What actually happened? What versions of Windows, Clipette and Python are you using?","title":"Want to Contribute"},{"location":"Contributing-guide/#contributing-to-clipette","text":"Bug fixes, feature additions, tests, documentation and more can be contributed via issues and/or pull requests . All contributions are welcome.","title":"Contributing to Clipette"},{"location":"Contributing-guide/#bug-fixes-feature-additions-etc","text":"Please send a pull request to the main branch. Please include documentation for new features. Tests or documentation without bug fixes or feature additions are welcome too. Feel free to ask questions via issues or discussions . Fork the Clipette repository. Create a branch from main . Develop bug fixes, features, tests, etc. Make sure to test your updates prior to creating a pull request. Create a pull request to pull the changes from your branch to the Clipette main .","title":"Bug fixes, feature additions, etc."},{"location":"Contributing-guide/#guidelines","text":"Separate code commits from reformatting commits. Follow PEP 8. Include Documentation within the code in docstrings near definitions as needed or appropriate with your bug fixes, feature additions and tests. Documentation docstrings within code must follow Sphinx docstring style .","title":"Guidelines"},{"location":"Contributing-guide/#reporting-issues","text":"When reporting issues, please include code that reproduces the issue and whenever possible, an image that demonstrates the issue. Please upload images to GitHub, not to third-party file hosting sites. If necessary, add the image to a zip or tar archive.","title":"Reporting Issues"},{"location":"Contributing-guide/#provide-details","text":"What did you do? What did you expect to happen? What actually happened? What versions of Windows, Clipette and Python are you using?","title":"Provide details"},{"location":"exceptions/","text":"ClipetteWin32ClipboardError # class ClipetteWin32ClipboardError(Exception) Raised when the clipboard is inaccessible or clipette is unable to exchange given data with the clipboard. ClipetteWin32MemoryError # class ClipetteWin32MemoryError(Exception) Raised when clipette is unable to perform memory operations through kernel32 api.","title":"Exceptions"},{"location":"exceptions/#clipettewin32clipboarderror","text":"class ClipetteWin32ClipboardError(Exception) Raised when the clipboard is inaccessible or clipette is unable to exchange given data with the clipboard.","title":"ClipetteWin32ClipboardError"},{"location":"exceptions/#clipettewin32memoryerror","text":"class ClipetteWin32MemoryError(Exception) Raised when clipette is unable to perform memory operations through kernel32 api.","title":"ClipetteWin32MemoryError"},{"location":"functions/","text":"open_clipboard # def open_clipboard() -> int Opens clipboard. Must be called before any action in performed. Returns : int : 0 if function fails, 1 otherwise. close_clipboard # def close_clipboard() -> int Closes clipboard. Must be called after all actions are performed. Returns : int : 0 if function fails, 1 otherwise. empty_clipboard # def empty_clipboard() -> int Empties clipboard. Should be called before any setter actions. Returns : 0 if function fails, 1 otherwise. get_UNICODETEXT # def get_UNICODETEXT() -> str Gets text from clipboard as a string. Returns : str : text grabbed from clipboard. set_UNICODETEXT # def set_UNICODETEXT(text: str) -> bool Sets text to clipboard in CF_UNICODETEXT format. Arguments : text ( str ): text to set to clipboard. Returns : bool : True if function succeeds. get_FILEPATHS # def get_FILEPATHS() -> list[str] Gets list of filepaths from clipboard. Returns : list[str] : list of filepaths. get_DIB # def get_DIB(filepath: str = '', filename: str = 'bitmap') -> str Gets image from clipboard as a bitmap and saves to filepath as filename.bmp . Arguments : filepath ( str ): filepath to save image into. filename ( str ): filename of the image. Returns : str : full filepath of the saved image. get_DIBV5 # def get_DIBV5(filepath: str = '', filename: str = 'bitmapV5') -> str Gets image from clipboard as a bitmapV5 and saves to filepath as filename.bmp . Arguments : filepath ( str ): filepath to save image into. filename ( str ): filename of the image. Returns : str : full filepath of the saved image. get_PNG # def get_PNG(filepath: str = '', filename: str = 'PNG') -> str Gets image in PNG or image/png format from clipboard and saves to filepath as filename.png . Arguments : filepath ( str ): filepath to save image into. filename ( str ): filename of the image. Returns : str : full filepath of the saved image. set_DIB # def set_DIB(src_bmp: str) -> bool Sets given bitmap image to clipboard in CF_DIB or CF_DIBV5 format according to the image. Arguments : src_bmp ( str ): full filepath of source image. Returns : bool : True if function succeeds. set_PNG # def set_PNG(src_png: str) -> bool Sets source PNG image to clipboard in PNG format. Arguments : src_png ( str ): full filepath of source image. Returns : bool : True if function succeeds. is_format_available # def is_format_available(format_id: int) -> bool Checks whether specified format is currently available on the clipboard. Arguments : format_id ( int ): id of format to check for. Returns : bool : True if specified format is available, False otherwise. get_available_formats # def get_available_formats(buffer_size: int = 32) -> dict[int, str] Gets a dict of all the currently available formats on the clipboard. Arguments : buffer_size ( int ): (optional) buffer size to store name of each format in. Returns : dict[int, str] : a dict {format_id : format_name} of all available formats. get_image # def get_image(filepath: str = '', filename: str = 'image') -> str Gets image from clipboard in a format according to a priority list ( PNG > DIBV5 > DIB ). Arguments : filepath ( str ): filepath to save image into. filename ( str ): filename of the image. Returns : str : full filepath of the saved image. set_image # def set_image(src_img: str) -> bool (NOT FULLY IMPLEMENTED) Sets source image to clipboard in multiple formats ( PNG , DIB ). Arguments : src_img ( str ): full filepath of source image. Returns : bool : True if function succeeds.","title":"Functions"},{"location":"functions/#open_clipboard","text":"def open_clipboard() -> int Opens clipboard. Must be called before any action in performed. Returns : int : 0 if function fails, 1 otherwise.","title":"open_clipboard"},{"location":"functions/#close_clipboard","text":"def close_clipboard() -> int Closes clipboard. Must be called after all actions are performed. Returns : int : 0 if function fails, 1 otherwise.","title":"close_clipboard"},{"location":"functions/#empty_clipboard","text":"def empty_clipboard() -> int Empties clipboard. Should be called before any setter actions. Returns : 0 if function fails, 1 otherwise.","title":"empty_clipboard"},{"location":"functions/#get_unicodetext","text":"def get_UNICODETEXT() -> str Gets text from clipboard as a string. Returns : str : text grabbed from clipboard.","title":"get_UNICODETEXT"},{"location":"functions/#set_unicodetext","text":"def set_UNICODETEXT(text: str) -> bool Sets text to clipboard in CF_UNICODETEXT format. Arguments : text ( str ): text to set to clipboard. Returns : bool : True if function succeeds.","title":"set_UNICODETEXT"},{"location":"functions/#get_filepaths","text":"def get_FILEPATHS() -> list[str] Gets list of filepaths from clipboard. Returns : list[str] : list of filepaths.","title":"get_FILEPATHS"},{"location":"functions/#get_dib","text":"def get_DIB(filepath: str = '', filename: str = 'bitmap') -> str Gets image from clipboard as a bitmap and saves to filepath as filename.bmp . Arguments : filepath ( str ): filepath to save image into. filename ( str ): filename of the image. Returns : str : full filepath of the saved image.","title":"get_DIB"},{"location":"functions/#get_dibv5","text":"def get_DIBV5(filepath: str = '', filename: str = 'bitmapV5') -> str Gets image from clipboard as a bitmapV5 and saves to filepath as filename.bmp . Arguments : filepath ( str ): filepath to save image into. filename ( str ): filename of the image. Returns : str : full filepath of the saved image.","title":"get_DIBV5"},{"location":"functions/#get_png","text":"def get_PNG(filepath: str = '', filename: str = 'PNG') -> str Gets image in PNG or image/png format from clipboard and saves to filepath as filename.png . Arguments : filepath ( str ): filepath to save image into. filename ( str ): filename of the image. Returns : str : full filepath of the saved image.","title":"get_PNG"},{"location":"functions/#set_dib","text":"def set_DIB(src_bmp: str) -> bool Sets given bitmap image to clipboard in CF_DIB or CF_DIBV5 format according to the image. Arguments : src_bmp ( str ): full filepath of source image. Returns : bool : True if function succeeds.","title":"set_DIB"},{"location":"functions/#set_png","text":"def set_PNG(src_png: str) -> bool Sets source PNG image to clipboard in PNG format. Arguments : src_png ( str ): full filepath of source image. Returns : bool : True if function succeeds.","title":"set_PNG"},{"location":"functions/#is_format_available","text":"def is_format_available(format_id: int) -> bool Checks whether specified format is currently available on the clipboard. Arguments : format_id ( int ): id of format to check for. Returns : bool : True if specified format is available, False otherwise.","title":"is_format_available"},{"location":"functions/#get_available_formats","text":"def get_available_formats(buffer_size: int = 32) -> dict[int, str] Gets a dict of all the currently available formats on the clipboard. Arguments : buffer_size ( int ): (optional) buffer size to store name of each format in. Returns : dict[int, str] : a dict {format_id : format_name} of all available formats.","title":"get_available_formats"},{"location":"functions/#get_image","text":"def get_image(filepath: str = '', filename: str = 'image') -> str Gets image from clipboard in a format according to a priority list ( PNG > DIBV5 > DIB ). Arguments : filepath ( str ): filepath to save image into. filename ( str ): filename of the image. Returns : str : full filepath of the saved image.","title":"get_image"},{"location":"functions/#set_image","text":"def set_image(src_img: str) -> bool (NOT FULLY IMPLEMENTED) Sets source image to clipboard in multiple formats ( PNG , DIB ). Arguments : src_img ( str ): full filepath of source image. Returns : bool : True if function succeeds.","title":"set_image"},{"location":"references/","text":"Win32 Clipboard API Standard Windows Clipboard Formats BMP File Format PNG File Format","title":"References"},{"location":"usage/","text":"Usage Examples # set text # import clipette if clipette.open_clipboard(): clipette.empty_cliboard() clipette.set_UNICODETEXT(\"<some text>\") clipette.close_clipboard() get PNG # import clipette if clipette.open_clipboard(): clipette.get_PNG(\"<filepath to save into>\", \"<filename>\") clipette.close_clipboard()","title":"Usage"},{"location":"usage/#usage-examples","text":"","title":"Usage Examples"},{"location":"usage/#set-text","text":"import clipette if clipette.open_clipboard(): clipette.empty_cliboard() clipette.set_UNICODETEXT(\"<some text>\") clipette.close_clipboard()","title":"set text"},{"location":"usage/#get-png","text":"import clipette if clipette.open_clipboard(): clipette.get_PNG(\"<filepath to save into>\", \"<filename>\") clipette.close_clipboard()","title":"get PNG"}]}